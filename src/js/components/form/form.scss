@import '../../../css/shared';

$formFontSize: 1.4rem;
$formLegendFontSize: 1.6rem;
$formLabelFontSize: $formFontSize;
$formBaseSpacing: 1.6rem;
$rowFieldHorizontalSpacing: $formBaseSpacing/2;
$formLineHeight: 1.3;

$formTextColour: #333;
$formTextHoverColor: #666;
$formFocusTextColour: darken(#80b5d5, 20%);
$formLineColour: #CCC;
$formHoverLineColour: darken($formLineColour, 15%);
$formFocusLineColour: #80b5d5;

$boxBorderRadius: 0.3rem;

@mixin formBoxStyle($padding: $formBaseSpacing/2) {
  padding: $padding;
  border: 0.1rem solid $formLineColour;
  border-radius: $boxBorderRadius;
  box-shadow: 0 0 0.3rem 0 rgba(0,0,0,.15) inset;
  transition: background 0.3s ease, border-color 0.3s ease;
  line-height: inherit;

  &:hover {
    border-color: $formHoverLineColour;
  }

  &:focus {
    border-color: $formFocusLineColour;
  }
}

.form {
  font-weight: bold;
  color: $formTextColour;
  line-height: $formLineHeight;
  margin-left: -$rowFieldHorizontalSpacing;
  margin-right: -$rowFieldHorizontalSpacing;

  > .group:first-child > .legend:first-child {
    margin-top: 0;
  }
}

.group {//a fieldset element
  clear: left;
  font-size: $formFontSize;
  display: block;
  border: 0;
  margin: 0 0 $formBaseSpacing 0;
  padding: 0;
  align-self: flex-start;//needed for groups nested inside rows to align correctly

  &:last-child {
    margin-bottom: 0;
  }

  &.hasLegend {
    font-weight: bold;
  }
}

.legend {
  display: block;
  float: left;
  width: calc(100% - #{$formBaseSpacing});
  margin: $formBaseSpacing/2 $rowFieldHorizontalSpacing $formBaseSpacing;
  padding: 0 0 ($formBaseSpacing/2) 0;
  font-weight: bold;
  font-size: $formLegendFontSize;
  border-bottom: 0.1rem solid $formLineColour;

  &.asLabel {
    font-size: $formLabelFontSize;
    border: 0;
    padding: 0;
    margin: 0 $rowFieldHorizontalSpacing $rowFieldHorizontalSpacing/2;
  }
}

.label {
  font-size: $formLabelFontSize;
  border: 0;
  padding: 0;
  margin: 0 0 $formBaseSpacing/4 0;
  display: block;
  min-width: 0;

  @at-root {
    label#{&} {
      cursor: pointer;//only real labels get this
    }
  }

  //checkbox stuff (checkboxes are made out of labels)
  $isCheckboxPadding: $formBaseSpacing/2;
  $toggleSize: 1em;//needs to be em
  $toggleWidth: $toggleSize * 2;

  .isCheckbox > & {
    @include formBoxStyle($padding: $isCheckboxPadding $isCheckboxPadding $isCheckboxPadding calc(#{$isCheckboxPadding} + #{$isCheckboxPadding} + #{$toggleWidth}));

    display: block;
    position: relative;

    $x: ($formLineHeight - $toggleSize) / 2;
    $topOffset: calc(#{$isCheckboxPadding} + #{$x});

    &::before {
      display: block;
      position: absolute;
      content: '';
      z-index: 1;
      background: rgba(0,0,0,.05);
      width: $toggleWidth;
      height: $toggleSize;
      top: $topOffset;
      left: $isCheckboxPadding;
      border-radius: 500rem;
      transition: background .3s ease;
    }

    &::after {
      display: block;
      box-shadow: 0 1px 2px 0 rgba(34,36,38,.15), 0 0 0 1px rgba(34,36,38,.15) inset;
      background: rgb(230,230,230);
      position: absolute;
      opacity: 1;
      content: '';
      z-index: 2;
      width: $toggleSize;
      height: $toggleSize;
      top: $topOffset;
      left: $isCheckboxPadding;
      border-radius: 500rem;
      transition: background .3s ease, left .3s ease;
    }

    &:hover {
      &::after {
        background: rgb(215,215,215);
      }
    }

    //checkbox checked/focus styles
    @at-root {
      .isCheckbox > .input:checked + .label {
        &::before {
          background: rgba(0,0,0,.25);
        }

        &::after {
          left: calc(#{$isCheckboxPadding} + #{$toggleWidth} - #{$toggleSize});
        }
      }

      .isCheckbox > .input:focus + .label {
        border-color: $formFocusLineColour;
      }
    }
  }
}

.input,
.textarea,
.select,
.output {
  @include formBoxStyle;

  font-size: $formFontSize;
  min-width: 0;
  cursor: text;
}

.output {
  @include formBoxStyle;

  font-size: $formFontSize;
  min-width: 0;
}

.isCheckbox > .input {
  @include offscreen;
}

.select {
  cursor: pointer;
}


//Checkboxes
$maxNumberOfCheckboxesColumns: 16;

.checkboxes {
  //padding-left: 0;
  //padding-right: 0;

  &.vertical {
    columns: auto auto;
    column-gap: 0;

    @for $columns from 1 through $maxNumberOfCheckboxesColumns {
      &.columns-#{$columns} {
        columns: auto $columns;
      }
    }
  }

  &.horizontal {
    display: flex;
    flex-flow: row wrap;

    @for $columns from 1 through $maxNumberOfCheckboxesColumns {
      &.columns-#{$columns} > * {
        flex: percentage(1/$columns) 0 1;
      }
    }
  }
}

.checkboxesItem {
  display: block;
  padding-left: $rowFieldHorizontalSpacing;
  padding-right: $rowFieldHorizontalSpacing;
  white-space: nowrap;
  cursor: pointer;
}

.checkboxesInput {
  font-weight: bold;
  vertical-align: middle;
}

.checkboxesLabel {
  white-space: normal;
  font-weight: normal;
  vertical-align: text-top;
  display: inline-block;
  margin-left: $formBaseSpacing/4;
  transition: color .3s ease;

  :hover > & {
    color: $formTextHoverColor;
  }
}

//checked styles
.checkboxesInput:checked + .checkboxesLabel {

}

.checkboxesInput:focus + .checkboxesLabel {
  color: $formFocusTextColour;
}

//Buttons
.button {
  background: $grey30;
  border: 0.1rem solid $borderCol;
  padding: $formBaseSpacing/2;
  border-radius: $basePadding/4;
  font-size: 1.4rem;
  color: $fontCol;
  line-height: inherit;

  @include blockInteraction($mouseBg: $grey35);
}

.container {
  clear: left;
  display: flex;
  flex-flow: row wrap;
  align-items: baseline;
  margin-bottom: $formBaseSpacing;
}

///////////////////
// General stuff //
///////////////////

.hide {
  @include offscreen;
}

////////////
// Layout //
////////////

.field,
.column {
  border: none;
  padding: 0;
  margin: 0;
  display: flex;
  flex-flow: column nowrap;

  &.inline {
    flex-flow: row wrap;
    align-items: baseline;
  }
}

.column {//add vertical spacing to column
  margin-bottom: -$formBaseSpacing/2;

  > * {
    margin-bottom: $formBaseSpacing/2;
  }
}

.row {
  clear: left;
  display: flex;
  flex-flow: row wrap;
  //align-items: flex-start;
  align-items: baseline;
  margin-bottom: $formBaseSpacing;

  &:last-child {
    margin-bottom: 0;
  }
}

@mixin paddedElements($percentage) {
  &.label,
  &.textarea,
  &.select,
  &.input,
  &.output,
  &.button,
  &.container {
    flex-basis: calc(#{$percentage} - #{$rowFieldHorizontalSpacing * 2});
    margin-left: $rowFieldHorizontalSpacing;
    margin-right: $rowFieldHorizontalSpacing;
  }
}

$maxColumns: 16;

@for $columns from 1 through $maxColumns {
  .columns-#{$columns} {

    > * {
      $percentage: percentage(1/$columns);
      $width: $percentage;
      flex: $width 0 1;
      min-width: 0;

      &.grow {
        flex-grow: 1;
      }

      @include paddedElements($percentage);

      @for $width from 1 through $columns {
        &.width-#{$width} {
          $percentage: percentage($width / $columns);
          flex-basis: $percentage;

          @include paddedElements($percentage);
        }
      }
    }
  }
}
