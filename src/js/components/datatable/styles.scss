@import '../../../css/shared';


//Overall table vars
$tableCol: $fontCol;
$tableBorderCol: $borderCol;
$tableBasePadding: $basePadding;

//thead vars
$theadCol: null;
$theadBg: $grey20;

$sortHoverBg: $grey30;

//tbody vars
$tbodyCol: null;
$tbodyBg: $grey0;
$tbodyBgAlt: $grey10;

//tfoot vars
$tfootCol: null;
$tfootBg: $grey35;

//Arrow vars
$arrowCol: $grey50;
$arrowWidth: 1.4rem;
$arrowHeight: 1rem;

//stack header vars
$stackHeaderCol: null;
$stackHeaderBg: null;

//stack content vars
$stackContentCol: null;
$stackContentBg: null;

//expand styles
$expandArrowCol: $grey70;
$expandArrowHoverCol: $grey40;

.dataTable {
  composes: responsive from "../../../css/generic.scss";

  color: $tableCol;
  width: 100%;
}

.table {
  width: 100%;
  border: 0.1rem solid $tableBorderCol;
  border-top: none;
  //margin-top: $tableBasePadding / 2;
  border-spacing: 0;
  border-collapse: separate;
}

//Header styles
.thead {
  font-weight: bold;
  color: $theadCol;
  background: $theadBg;
}

.th {
  font-size: 1.4rem;
  vertical-align: middle;
  padding: 0;
  border-left: 0.1rem solid $tableBorderCol;
  border-top: 0.1rem solid $tableBorderCol;
  //border-bottom: 0.1rem solid $tableBorderCol;
  text-align: center;
  white-space: nowrap;

  &:first-child {
    border-left: 0;
  }
}


//-non-sorting column header styles
.columnLabel {
  display: block;
  padding: $tableBasePadding/4 $arrowWidth + ($tableBasePadding*0.75);
  white-space: inherit;
  text-align: inherit;
  font-weight: bold;
}

//-Sort button styles
.columnSortBtn {
  composes: columnLabel;

  background: transparent;
  padding: $tableBasePadding/4 $tableBasePadding/2;
  border: 0;
  margin: 0;
  width: 100%;
  cursor: pointer;
  color: inherit;

  //@include textInteraction();
  @include blockInteraction($mouseBg: $sortHoverBg);
}

//-Sorting arrow styles
.columnSortBtnInner {
  display: inline-block;
  padding: 0 $arrowWidth + $tableBasePadding/4;
  position: relative;

  &::after {
    position: absolute;
    right: 0;
    top: 50%;
    margin-top: -$arrowHeight/2;
  }

  &.asc {
    &::after {
      @include triangle(top, $arrowWidth, $arrowHeight, $arrowCol);
    }
  }

  &.desc {
    &::after {
      @include triangle(bottom, $arrowWidth, $arrowHeight, $arrowCol);
    }
  }

  &:global(.alignStart) {
    padding-left: 0;
  }
}


//tbody styles
.tbody {
  color: $tbodyCol;
}

//-Row styles
.tr {
  background: $tbodyBg;

  &.even {
    background: $tbodyBgAlt;
  }

  &.selected {
    box-shadow: inset 0.5px 1px 4px 0 rgba($grey70, 0.75), inset 0 0 0 100px rgba(0, 0, 0, 0.05);//0,127,173
  }
}

.tr.selectable {
  @include blockInteraction();
}

//-Cell styles
.td {
  font-size: 1.4rem;
  line-height: 1.0;
  border-left: 0.1rem solid $tableBorderCol;
  border-top: 0.1rem solid $tableBorderCol;
  vertical-align: top;
  padding: $tableBasePadding/4 $tableBasePadding/2;
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

  &:first-child {
    border-left: 0;
  }
}

//tfoot styles
.tfootTD {
  background: $tfootBg;
  color: $tfootCol;
  border-top: 0.1rem solid $tableBorderCol;
  padding: 0;

  &:empty {
    display: none;
  }
}


////////////////////
// Stacked styles //
////////////////////

.table.stacked,
.tbody.stacked,
.tr.stacked,
.tfoot.stacked,
.tfootRow.stacked,
.tfootTD.stacked {
  display: block;
}

//Put table header offscreen
.thead.stacked {
  @include offscreen();
  display: block;
}

.td.stacked {
  display: flex;
  flex: auto 1 1;
  border-left: 0;
  text-align: left;
  padding: 0;
}


.tdHeader {
  display: none;
  flex: 40% 0 0;
  max-width: 35rem;
  font-weight: bold;
  border-right: 0.1rem solid $tableBorderCol;
  color: $stackHeaderCol;
  background: $stackHeaderBg;
}

//-Non-sorting stacked header style
.rowLabel {
  padding: $tableBasePadding/2;
  display: block;
  font-weight: bold;
  text-align: left;
}

//-Sorting button styles
.rowSortBtn {
  composes: rowLabel;

  cursor: pointer;
  margin: 0;
  border: 0;
  background: transparent;
  color: inherit;
  width: 100%;

  @include textInteraction();
}

//-For showing the arrows on stacked tables
.rowSortBtnInner {
  display: inline-block;
  padding-right: $arrowWidth+$tableBasePadding/4;
  position: relative;

  &::after {
    position: absolute;
    right: 0;
    top: 50%;
    margin-top: -$arrowHeight/2;
  }

  &.asc {
    &::after {
      @include triangle(top, $arrowWidth, $arrowHeight, $arrowCol);
    }
  }

  &.desc {
    &::after {
      @include triangle(bottom, $arrowWidth, $arrowHeight, $arrowCol);
    }
  }
}

//show cell headers if stacked
.tdHeader.stacked {
  display: block;
}

//stacked table cell content styles
.tdContent.stacked {
  flex: 50% 1 1;
  padding: $tableBasePadding/2;

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  color: $stackContentCol;
  background: $stackContentBg;
}


//Expandable rows styles
.expandTd {
  padding: 0;
}

.expandTd.visible {
  border-top: 0.1rem solid $borderCol;
}

.expandContent {
  will-change: opacity, height;
  overflow-y: hidden;
}

.expandContent:before, .expandContent:after{
    content: ' ';
    display: table;
}

//expand toggle button styles
.td.expandToggleCell {
  padding: 0;
  position: relative;
  min-width: 3rem;
}

.tdContent.expandToggleCell {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.tdHeader.expandToggleCell {
  display: none;
}

.expandToggleButton {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  color: $expandArrowCol;
  background: transparent;
  display: block;
  min-height: 1.4rem;
  width: 100%;
  border: 0;
  padding: 0;
  cursor: pointer;


  @include blockInteraction($mouseBg: $grey30);//$mouseCol: $expandArrowHoverCol

  &:after {
    @include triangle(bottom, 1.6rem, 1rem, currentColor);
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -0.5rem 0 0 -0.8rem;
    transform: rotate(0);
    transition: transform 0.3s ease-in-out;
  }
}

.expandToggleButton.expanded {
  &:after {
    transform: rotate(180deg);
  }
}

//expand stacked styles
.expandTd.stacked,
.expandTr.stacked {
  display: block;
}

//expand toggle button stacked styles
.expandToggleCell.stacked,
.expandToggleButton.stacked {
  position: relative;
  padding: 0;
}

.expandToggleButton.stacked {
  background: $grey20;
  padding: (($basePadding/2) + ($arrowHeight/2));
}
