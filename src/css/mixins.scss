@mixin triangle($direction, $sizeH, $sizeV, $color) {
    content: '';
    display: block;
    width: 0;
    height: 0;
    border-style: solid;

  @if $direction == top {
    border-width: 0 $sizeH/2 $sizeV $sizeH/2;
    border-color: transparent transparent $color transparent;
  }
  @if $direction == bottom {
    border-width: $sizeV $sizeH/2 0 $sizeH/2;
    border-color: $color transparent transparent transparent;
  }
  @if $direction == left {
    border-width: $sizeV/2 $sizeH $sizeV/2 0;
    border-color: transparent $color transparent transparent;
  }
  @if $direction == right {
    border-width: $sizeV/2 0 $sizeV/2 $sizeH;
    border-color: transparent transparent transparent $color;
  }
  // @if $direction == topright {
  //   border-width: 0 $sizeH $sizeV 0;
  //   border-color: transparent $color transparent transparent;
  // }
  // @if $direction == bottomright {
  //   border-width: 0 0 $sizeH $sizeV;
  //   border-color: transparent transparent $color transparent;
  // }
  // @if $direction == bottomleft {
  //   border-width: $sizeH 0 0 $sizeV;
  //   border-color: transparent transparent transparent $color;
  // }
  // @if $direction == topleft {
  //   border-width: $sizeH $sizeV 0 0;
  //   border-color: $color transparent transparent transparent;
  // }
}

@mixin blockInteraction($mouseCol: $blockMouseInteractionCol, $mouseBg: $blockMouseInteractionBg, $keyboardCol: $blockKeyboardInteractionCol, $keyboardBg: $blockKeyboardInteractionBg) {
  outline: 0!important;

  &:hover {
    background-color: $mouseBg;
    color: $mouseCol;
    cursor: pointer;
  }

  :global(.focus_keyboard) &:focus {
    background-color: $keyboardBg;
    color: $keyboardCol;
  }
}

@mixin textInteraction($mouseCol: $textMouseInteractionCol, $mouseBg: $textMouseInteractionBg, $keyboardCol: $textKeyboardInteractionCol, $keyboardBg: $textKeyboardInteractionBg) {
  outline: 0!important;

  &:hover {
    color: $mouseCol;
    background-color: $mouseBg;
    cursor: pointer;
  }

  :global(.focus_keyboard) &:focus {
    color: $keyboardCol;
    background-color: $keyboardBg;
  }
}

@mixin offscreen() {
  position: absolute;
  //top: -9999px;
  left: -9999px;
}

@mixin clearfix() {
  &:before, &:after {
    content: ' ';
    display: table;
  }
}

@mixin wordBreak() {
  //Based on: https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
  // These are technically the same, but use both
  overflow-wrap: break-word;
  word-wrap: break-word;

  -ms-word-break: break-all;
  // This is the dangerous one in WebKit, as it breaks things wherever
  word-break: break-all;
  // Instead use this non-standard one:
  word-break: break-word;

  // Adds a hyphen where the word breaks, if supported (No Blink)
  hyphens: auto;
}

@mixin textTruncate() {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
